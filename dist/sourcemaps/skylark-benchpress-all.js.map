{"version":3,"sources":["skylark-benchpress-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","runtime","guard","value","Array","isArray","iter","each","output","keys","Object","key","helper","context","helpers","helperName","args","out","apply","e","Promise","try","fn","resolve","templateFunction","toString","Benchpress","registerHelper","escapeCharMap","&","<",">","\"","'","`","=","replaceChar","c","escapeChars","str","replace","String","cache","globals","setGlobal","assign","jQuery","extend","render","template","data","block","addGlobals","reject","promise","loader","then","load","blocks","flush","parse","callback","TypeError","setTimeout","err","console","error","registerLoader","benchpress","main"],"mappings":"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","file":"../skylark-benchpress-all.js","sourcesContent":["define('skylark-langx/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx/skylark',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-benchpress/benchpress',[\n  \"skylark-langx/skylark\"\n],function (skylark) {\n  var runtime = function () {\n    'use strict';\n\n    /**\n     * Convert null and undefined values to empty strings\n     * @param {any} value\n     * @returns {string}\n     */\n\n    function guard(value) {\n      return value == null || Array.isArray(value) && value.length === 0 ? '' : value;\n    }\n\n    /**\n     * Iterate over an object or array\n     * @param {string[]} obj - Iteratee object / array\n     * @param {function} each - Callback to execute on each item\n     * @return {string}\n     */\n    function iter(obj, each) {\n      if (!obj || typeof obj !== 'object') {\n        return '';\n      }\n\n      var output = '';\n      var keys = Object.keys(obj);\n      var length = keys.length;\n\n      for (var i = 0; i < length; i += 1) {\n        var key = keys[i];\n        output += each(key, i, length, obj[key]);\n      }\n\n      return output;\n    }\n\n    /**\n     * Execute a helper\n     * @param {object} context - Base data object\n     * @param {object} helpers - Map of helper functions\n     * @param {string} helperName - Name of helper to execute\n     * @param {any[]} args - Array of arguments\n     * @returns {string}\n     */\n    function helper(context, helpers, helperName, args) {\n      if (typeof helpers[helperName] !== 'function') {\n        return '';\n      }\n      try {\n        var out = helpers[helperName].apply(context, args);\n        return out || '';\n      } catch (e) {\n        return '';\n      }\n    }\n\n    /**\n     * Run a compiled template function\n     * @param {object} helpers - Map of helper functions\n     * @param {object} context - Base data object\n     * @param {function} templateFunction - Compiled template function\n     * @returns {string}\n     */\n    function runtime(helpers, context, templateFunction) {\n      return guard(templateFunction(helpers, context, guard, iter, helper)).toString();\n    }\n\n    // polyfill for Promise.try\n    if (typeof Promise.try !== 'function') {\n      Promise.try = {\n        try: function _try(fn) {\n          return new Promise(function (resolve) {\n            return resolve(fn());\n          });\n        }\n      }.try;\n    }\n\n    return runtime;\n  }();\n\n  'use strict';\n\n  /** @exports Benchpress */\n  var Benchpress = {};\n\n  Benchpress.runtime = runtime;\n\n  Benchpress.helpers = {};\n\n  /**\n   * Register a helper function\n   * @param {string} name - Helper name\n   * @param {function} fn - Helper function\n   */\n  Benchpress.registerHelper = function registerHelper(name, fn) {\n    Benchpress.helpers[name] = fn;\n  };\n\n  // add default escape function for escaping HTML entities\n  var escapeCharMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  var replaceChar = function replaceChar(c) {\n    return escapeCharMap[c];\n  };\n  \n  var escapeChars = /[&<>\"'`=]/g;\n\n  Benchpress.registerHelper('__escape', function (str) {\n    if (str == null) {\n      return '';\n    }\n    if (!str) {\n      return String(str);\n    }\n\n    return str.toString().replace(escapeChars, replaceChar);\n  });\n\n  Benchpress.cache = {};\n\n  Benchpress.globals = {};\n\n  /**\n   * Set a global data value\n   * @param {string} key - Property key\n   * @param {Object} value - Property value\n   */\n  Benchpress.setGlobal = function setGlobal(key, value) {\n    Benchpress.globals[key] = value;\n  };\n\n  var assign = Object.assign || jQuery.extend; // eslint-disable-line\n\n  /**\n   * @private\n   */\n  Benchpress.addGlobals = function addGlobals(data) {\n    return assign({}, Benchpress.globals, data);\n  };\n\n  /**\n   * Clear the template cache\n   */\n  Benchpress.flush = function flush() {\n    Benchpress.cache = {};\n  };\n\n  // necessary to support both promises and callbacks\n  // can remove when `parse` methods are removed\n  function load(template) {\n    return new Promise(function (resolve, reject) {\n      var promise = Benchpress.loader(template, function (templateFunction) {\n        resolve(templateFunction);\n      });\n\n      if (promise && promise.then) {\n        promise.then(resolve, reject);\n      }\n    });\n  }\n\n  /**\n   * Fetch and run the given template\n   * @param {string} template - Name of template to fetch\n   * @param {Object} data - Data with which to run the template\n   * @param {string} [block] - Parse only this block in the template\n   * @returns {Promise<string>} - Rendered output\n   */\n  function render(template, data, block) {\n    data = Benchpress.addGlobals(data || {});\n\n    return Promise.try(function () {\n      Benchpress.cache[template] = Benchpress.cache[template] || load(template);\n      return Benchpress.cache[template];\n    }).then(function (templateFunction) {\n      if (block) {\n        templateFunction = templateFunction.blocks && templateFunction.blocks[block];\n      }\n      if (!templateFunction) {\n        return '';\n      }\n\n      return runtime(Benchpress.helpers, data, templateFunction);\n    });\n  }\n\n  /**\n   * Alias for {@link render}, but uses a callback\n   * @param {string} template - Name of template to fetch\n   * @param {string} [block] - Render only this block in the template\n   * @param {Object} data - Data with which to run the template\n   * @param {function} callback - callback(output)\n   *\n   * @deprecated - Use {@link render} instead\n   */\n  function parse(template, block, data, callback) {\n    if (!callback && typeof block === 'object' && typeof data === 'function') {\n      callback = data;\n      data = block;\n      block = null;\n    }\n    if (typeof callback !== 'function') {\n      // Calling parse synchronously with no callback is discontinued\n      throw TypeError('Invalid Arguments: callback must be a function');\n    }\n    if (!template) {\n      callback('');\n      return;\n    }\n\n    render(template, data, block).then(function (output) {\n      return setTimeout(callback, 0, output);\n    }, function (err) {\n      return console.error(err);\n    } // eslint-disable-line no-console\n    );\n  }\n\n  Benchpress.render = render;\n  Benchpress.parse = parse;\n\n  /**\n   * Register a loader function to fetch templates\n   * - `loader(name, callback) => callback(templateFunction)`\n   * - `loader(name) => Promise<templateFunction>`\n   * @param {function} loader\n   */\n  Benchpress.registerLoader = function registerLoader(loader) {\n    Benchpress.loader = loader;\n  };\n\n  return skylark.attach(\"itg.benchpress\",Benchpress);\n\n});\ndefine('skylark-benchpress/main',[\r\n\t\"./benchpress\"\r\n],function(benchpress) {\r\n\r\n\treturn benchpress;\r\n});\ndefine('skylark-benchpress', ['skylark-benchpress/main'], function (main) { return main; });\n\n"]}