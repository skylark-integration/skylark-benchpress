{"version":3,"sources":["benchpress.js"],"names":["define","exports","module","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","skylark","runtime","guard","value","length","iter","each","output","keys","Object","i","key","helper","context","helpers","helperName","args","apply","e","Promise","try","fn","resolve","templateFunction","toString","Benchpress","registerHelper","name","escapeCharMap","&","<",">","\"","'","`","=","replaceChar","c","escapeChars","str","replace","String","cache","globals","setGlobal","assign","jQuery","extend","render","template","data","block","addGlobals","reject","promise","loader","then","load","blocks","flush","parse","callback","TypeError","setTimeout","err","console","error","registerLoader","attach"],"mappings":";;;;;;;AAAAA,UAAW,WACP,aACA,IAAIC,KACAC,GAAWD,YA6If,SAASE,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OA/IAJ,QAAQ,yBAA0B,SAAUS,GACxC,IAAIC,EAAU,WACV,SAASC,EAAMC,GACX,OAAgB,MAATA,GAAiBP,MAAMC,QAAQM,IAA2B,IAAjBA,EAAMC,OAAe,GAAKD,EAE9E,SAASE,EAAKV,EAAKW,GACf,IAAKX,GAAsB,iBAARA,EACf,MAAO,GAKX,IAHA,IAAIY,EAAS,GACTC,EAAOC,OAAOD,KAAKb,GACnBS,EAASI,EAAKJ,OACTM,EAAI,EAAGA,EAAIN,EAAQM,GAAK,EAAG,CAChC,IAAIC,EAAMH,EAAKE,GACfH,GAAUD,EAAKK,EAAKD,EAAGN,EAAQT,EAAIgB,IAEvC,OAAOJ,EAEX,SAASK,EAAOC,EAASC,EAASC,EAAYC,GAC1C,GAAmC,mBAAxBF,EAAQC,GACf,MAAO,GAEX,IAEI,OADUD,EAAQC,GAAYE,MAAMJ,EAASG,IAC/B,GAChB,MAAOE,GACL,MAAO,IAef,MAT2B,mBAAhBC,QAAQC,MACfD,QAAQC,IACC,SAAcC,GACf,OAAO,IAAIF,QAAQ,SAAUG,GACzB,OAAOA,EAAQD,SAP/B,SAAiBP,EAASD,EAASU,GAC/B,OAAOrB,EAAMqB,EAAiBT,EAASD,EAASX,EAAOG,EAAMO,IAASY,YA7BhE,GA0CVC,EAA+B,iBAAXhC,GAAuBA,EAAOD,QAAUC,EAAOD,WACvEiC,EAAWxB,QAAUA,EACrBwB,EAAWX,WACXW,EAAWC,eAAiB,SAAwBC,EAAMN,GACtDI,EAAWX,QAAQa,GAAQN,GAE/B,IAAIO,GACAC,IAAK,QACLC,IAAK,OACLC,IAAK,OACLC,IAAK,SACLC,IAAK,SACLC,IAAK,SACLC,IAAK,UAELC,EAAc,SAAqBC,GACnC,OAAOT,EAAcS,IAErBC,EAAc,aAClBb,EAAWC,eAAe,WAAY,SAAUa,GAC5C,OAAW,MAAPA,EACO,GAENA,EAGEA,EAAIf,WAAWgB,QAAQF,EAAaF,GAFhCK,OAAOF,KAItBd,EAAWiB,SACXjB,EAAWkB,WACXlB,EAAWmB,UAAY,SAAmBjC,EAAKR,GAC3CsB,EAAWkB,QAAQhC,GAAOR,GAE9B,IAAI0C,EAASpC,OAAOoC,QAAUC,OAAOC,OAiBrC,SAASC,EAAOC,EAAUC,EAAMC,GAE5B,OADAD,EAAOzB,EAAW2B,WAAWF,OACtB/B,QAAQC,IAAI,WAEf,OADAK,EAAWiB,MAAMO,GAAYxB,EAAWiB,MAAMO,IAbtD,SAAcA,GACV,OAAO,IAAI9B,QAAQ,SAAUG,EAAS+B,GAClC,IAAIC,EAAU7B,EAAW8B,OAAON,EAAU,SAAU1B,GAChDD,EAAQC,KAER+B,GAAWA,EAAQE,MACnBF,EAAQE,KAAKlC,EAAS+B,KAOiCI,CAAKR,GACzDxB,EAAWiB,MAAMO,KACzBO,KAAK,SAAUjC,GAId,OAHI4B,IACA5B,EAAmBA,EAAiBmC,QAAUnC,EAAiBmC,OAAOP,IAErE5B,EAGEtB,EAAQwB,EAAWX,QAASoC,EAAM3B,GAF9B,KA6BnB,OAvDAE,EAAW2B,WAAa,SAAoBF,GACxC,OAAOL,KAAWpB,EAAWkB,QAASO,IAE1CzB,EAAWkC,MAAQ,WACflC,EAAWiB,UA8CfjB,EAAWuB,OAASA,EACpBvB,EAAWmC,MApBX,SAAeX,EAAUE,EAAOD,EAAMW,GAMlC,GALKA,GAA6B,iBAAVV,GAAsC,mBAATD,IACjDW,EAAWX,EACXA,EAAOC,EACPA,EAAQ,MAEY,mBAAbU,EACP,MAAMC,UAAU,kDAEfb,EAILD,EAAOC,EAAUC,EAAMC,GAAOK,KAAK,SAAUjD,GACzC,OAAOwD,WAAWF,EAAU,EAAGtD,IAChC,SAAUyD,GACT,OAAOC,QAAQC,MAAMF,KANrBH,EAAS,KAWjBpC,EAAW0C,eAAiB,SAAwBZ,GAChD9B,EAAW8B,OAASA,GAEjBvD,EAAQoE,OAAO,iBAAkB3C,KAWxC/B,EAAkBD,EAAOD,SAClBC,EAAOD,QACTE,EAAkBF,GAChBA,OADN","file":"../benchpress.js","sourcesContent":["define([], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    define(['skylark-langx/skylark'], function (skylark) {\n        var runtime = function () {\n            function guard(value) {\n                return value == null || Array.isArray(value) && value.length === 0 ? '' : value;\n            }\n            function iter(obj, each) {\n                if (!obj || typeof obj !== 'object') {\n                    return '';\n                }\n                var output = '';\n                var keys = Object.keys(obj);\n                var length = keys.length;\n                for (var i = 0; i < length; i += 1) {\n                    var key = keys[i];\n                    output += each(key, i, length, obj[key]);\n                }\n                return output;\n            }\n            function helper(context, helpers, helperName, args) {\n                if (typeof helpers[helperName] !== 'function') {\n                    return '';\n                }\n                try {\n                    var out = helpers[helperName].apply(context, args);\n                    return out || '';\n                } catch (e) {\n                    return '';\n                }\n            }\n            function runtime(helpers, context, templateFunction) {\n                return guard(templateFunction(helpers, context, guard, iter, helper)).toString();\n            }\n            if (typeof Promise.try !== 'function') {\n                Promise.try = {\n                    try: function _try(fn) {\n                        return new Promise(function (resolve) {\n                            return resolve(fn());\n                        });\n                    }\n                }.try;\n            }\n            return runtime;\n        }();\n        var Benchpress = typeof module === 'object' && module.exports ? module.exports : {};\n        Benchpress.runtime = runtime;\n        Benchpress.helpers = {};\n        Benchpress.registerHelper = function registerHelper(name, fn) {\n            Benchpress.helpers[name] = fn;\n        };\n        var escapeCharMap = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#x27;',\n            '`': '&#x60;',\n            '=': '&#x3D;'\n        };\n        var replaceChar = function replaceChar(c) {\n            return escapeCharMap[c];\n        };\n        var escapeChars = /[&<>\"'`=]/g;\n        Benchpress.registerHelper('__escape', function (str) {\n            if (str == null) {\n                return '';\n            }\n            if (!str) {\n                return String(str);\n            }\n            return str.toString().replace(escapeChars, replaceChar);\n        });\n        Benchpress.cache = {};\n        Benchpress.globals = {};\n        Benchpress.setGlobal = function setGlobal(key, value) {\n            Benchpress.globals[key] = value;\n        };\n        var assign = Object.assign || jQuery.extend;\n        Benchpress.addGlobals = function addGlobals(data) {\n            return assign({}, Benchpress.globals, data);\n        };\n        Benchpress.flush = function flush() {\n            Benchpress.cache = {};\n        };\n        function load(template) {\n            return new Promise(function (resolve, reject) {\n                var promise = Benchpress.loader(template, function (templateFunction) {\n                    resolve(templateFunction);\n                });\n                if (promise && promise.then) {\n                    promise.then(resolve, reject);\n                }\n            });\n        }\n        function render(template, data, block) {\n            data = Benchpress.addGlobals(data || {});\n            return Promise.try(function () {\n                Benchpress.cache[template] = Benchpress.cache[template] || load(template);\n                return Benchpress.cache[template];\n            }).then(function (templateFunction) {\n                if (block) {\n                    templateFunction = templateFunction.blocks && templateFunction.blocks[block];\n                }\n                if (!templateFunction) {\n                    return '';\n                }\n                return runtime(Benchpress.helpers, data, templateFunction);\n            });\n        }\n        function parse(template, block, data, callback) {\n            if (!callback && typeof block === 'object' && typeof data === 'function') {\n                callback = data;\n                data = block;\n                block = null;\n            }\n            if (typeof callback !== 'function') {\n                throw TypeError('Invalid Arguments: callback must be a function');\n            }\n            if (!template) {\n                callback('');\n                return;\n            }\n            render(template, data, block).then(function (output) {\n                return setTimeout(callback, 0, output);\n            }, function (err) {\n                return console.error(err);\n            });\n        }\n        Benchpress.render = render;\n        Benchpress.parse = parse;\n        Benchpress.registerLoader = function registerLoader(loader) {\n            Benchpress.loader = loader;\n        };\n        return skylark.attach('itg.benchpress', Benchpress);\n    });\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}