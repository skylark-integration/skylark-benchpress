{"version":3,"sources":["../../../lib/compiler/tokens.js"],"names":["_","require","first","arr","fn","l","length","i","res","exports","matchPattern","tokens","input","end","Tok","matches","patterns","pattern","match","splitArgs","str","out","inString","currentArg","index","c","push","trim","Token","constructor","tokenType","name","priority","Text","value","Expression","found","extensions","TypeError","Extension","flatMap","Ext","map","join","unescapeMap","StringLiteral","raw","rawValue","replace","Object","assign","SimpleExpression","path","simpleOrString","HelperExpression","helperName","args","arg","OpenIf","not","test","OpenIter","subject","cleanName","Else","Close","RawMustache","expression","EscapedMustache"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\n/**\n * Get the first truthy value returned by a mapper function\n * @param {any[]} arr\n * @param {function} fn\n */\nfunction first(arr, fn) {\n  const l = arr.length;\n  for (let i = 0; i < l; i += 1) {\n    const res = fn(arr[i], i);\n    if (res) {\n      return res;\n    }\n  }\n\n  return null;\n}\nexports.first = first;\n\nfunction matchPattern(tokens, input, end) {\n  return first(tokens, (Tok) => {\n    let matches;\n    if (Tok.patterns) {\n      matches = first(Tok.patterns, pattern => input.match(`^(?:${pattern})${end ? '$' : ''}`));\n    } else {\n      matches = input.match(`^(?:${Tok.pattern})${end ? '$' : ''}`);\n    }\n    return matches && [Tok, matches];\n  });\n}\nexports.matchPattern = matchPattern;\n\n/**\n * Split on commas, but ignore commas inside strings\n * @param {string} str\n */\nfunction splitArgs(str) {\n  const out = [];\n\n  let inString = false;\n  let currentArg = '';\n\n  for (let index = 0; index < str.length; index += 1) {\n    const c = str[index];\n    if (c === ',' && !inString) {\n      out.push(currentArg.trim());\n      currentArg = '';\n    } else if (currentArg.length === 0 && c === '\"' && !inString) {\n      currentArg += c;\n      inString = true;\n    } else if (inString && c === '\"' && str[index - 1] !== '\\\\') {\n      currentArg += c;\n      inString = false;\n    } else if (!(c === ' ' && currentArg.length === 0)) {\n      currentArg += c;\n    }\n  }\n  out.push(currentArg.trim());\n\n  return out;\n}\nexports.splitArgs = splitArgs;\n\nclass Token {\n  constructor() {\n    this.tokenType = this.constructor.name;\n  }\n\n  static priority = 0;\n}\n\nclass Text extends Token {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n}\n\nclass Expression extends Token {\n  constructor(value) {\n    super();\n\n    const found = matchPattern(Expression.extensions, value, true);\n\n    if (!found) {\n      throw TypeError('Invalid arguments');\n    }\n\n    const [Extension, matches] = found;\n    return new Extension(...matches);\n  }\n\n  static extensions = [];\n\n  static get pattern() {\n    return _.flatMap(Expression.extensions, Ext => Ext.patterns || Ext.pattern)\n      .map(pattern => `(?:${pattern})`)\n      .join('|');\n  }\n}\n\nconst unescapeMap = {\n  '\\\\b': '\\b',\n  '\\\\t': '\\t',\n  '\\\\n': '\\n',\n  '\\\\v': '\\v',\n  '\\\\f': '\\f',\n  '\\\\r': '\\r',\n  '\\\\\"': '\"',\n  '\\\\\\'': '\\'',\n  '\\\\\\\\': '\\\\',\n};\n\nclass StringLiteral extends Token {\n  constructor(raw, rawValue) {\n    super();\n\n    const value = rawValue.replace(/\\\\(.)/g, (str, c) => unescapeMap[str] || c);\n    Object.assign(this, { raw, rawValue, value });\n  }\n\n  static pattern = '\"((?:\\\\\\\\.|[^\"\\\\n])*)\"';\n}\n\nExpression.extensions.push(StringLiteral);\n\nclass SimpleExpression extends Token {\n  constructor(path) {\n    super();\n    Object.assign(this, { path });\n  }\n\n  static pattern = '[@a-zA-Z0-9/._:\\\\-]+';\n}\n\nExpression.extensions.push(SimpleExpression);\n\nconst simpleOrString = `(?:${StringLiteral.pattern}|${SimpleExpression.pattern})`;\n\nclass HelperExpression extends Token {\n  constructor(raw, helperName, args) {\n    super();\n    if (args) {\n      const arr = splitArgs(args.replace(/^ *, */, '')).map(arg => new Expression(arg));\n      Object.assign(this, { raw, helperName, args: arr });\n    } else {\n      Object.assign(this, { raw, helperName, args: [] });\n    }\n  }\n\n  static patterns = [\n    `function\\\\.(${SimpleExpression.pattern})((?: *, *${simpleOrString})*)`,\n    `(${SimpleExpression.pattern})(?:\\\\( *(${simpleOrString}(?: *, *${simpleOrString})*)? *\\\\))`,\n  ];\n}\n\nExpression.extensions.push(HelperExpression);\n\nclass OpenIf extends Token {\n  constructor(raw, not, test) {\n    super();\n    Object.assign(this, { raw, not: !!not, test: new Expression(test) });\n  }\n\n  static patterns = [\n    `<!-- IF (!?)(${Expression.pattern}) -->`,\n    `{{{ ?if (!?)(${Expression.pattern}) ?}}}`,\n  ];\n\n  static priority = 60;\n}\n\nclass OpenIter extends Token {\n  constructor(raw, subject) {\n    super();\n    Object.assign(this, {\n      raw,\n      subject: new SimpleExpression(subject),\n      name: subject.replace(/^[./]*/, ''),\n      cleanName: subject.replace(/^[./]*/, '').replace(/(^[^a-zA-Z_])|[^a-zA-Z0-9_]/g, '_'),\n    });\n  }\n\n  static patterns = [\n    `<!-- BEGIN (${SimpleExpression.pattern}) -->`,\n    `{{{ ?each (${SimpleExpression.pattern}) ?}}}`,\n  ];\n\n  static priority = 50;\n}\n\nclass Else extends Token {\n  static patterns = [\n    '<!-- ELSE -->',\n    '{{{ ?else ?}}}',\n  ];\n\n  static priority = 40;\n}\n\nclass Close extends Token {\n  constructor(raw) {\n    super();\n    Object.assign(this, { raw });\n  }\n\n  static patterns = [\n    '<!-- END(.*?) -->',\n    '{{{ ?end ?}}}',\n  ];\n\n  static priority = 30;\n}\n\nclass RawMustache extends Token {\n  constructor(raw, expression) {\n    super();\n    Object.assign(this, { raw, expression: new Expression(expression) });\n  }\n\n  static pattern = `\\\\{\\\\{(${Expression.pattern})\\\\}\\\\}`;\n\n  static priority = 20;\n}\n\nclass EscapedMustache extends RawMustache {\n  static pattern = `\\\\{(${Expression.pattern})\\\\}`;\n\n  static priority = 10;\n}\n\nconst tokens = {\n  Token,\n  Text,\n  StringLiteral,\n  Expression,\n  SimpleExpression,\n  HelperExpression,\n  OpenIf,\n  OpenIter,\n  Else,\n  Close,\n  RawMustache,\n  EscapedMustache,\n};\n\nexports.tokens = tokens;\n"],"file":"tokens.js"}