{"version":3,"sources":["../../../lib/compiler/blocks.js"],"names":["t","require","c","handleBinaryExpression","node","left","right","out","side","forEach","block","isCallExpression","isIdentifier","callee","name","push","cleanName","replaceWith","newNode","getBlocks","ast","Array","isArray","map","isReturnStatement","argument","isConditionalExpression","alternate","consequent","isBinaryExpression","filter","Boolean","reduce","prev","arr","concat","everyBlock","keysUsed","props","includes","objectProperty","stringLiteral","functionExpression","identifier","runtimeParams","blockStatement","returnStatement","callExpression","memberExpression","BLOCKS","blocks","body","nodes","length","expressionStatement","assignmentExpression","objectExpression","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst t = require('babel-types');\n\nconst c = require('./constants');\n\nfunction handleBinaryExpression(node) {\n  const { left, right } = node;\n  const out = [];\n\n  right.side = 'right';\n  left.side = 'left';\n\n  [right, left].forEach((block) => {\n    if (t.isCallExpression(block) && t.isIdentifier(block.callee, { name: 'iter' })) {\n      out.push({\n        block,\n        name: block.name,\n        cleanName: block.cleanName,\n        replaceWith: (newNode) => {\n          node[block.side] = newNode;\n        },\n      });\n    } else {\n      out.push(...getBlocks(block));\n    }\n  });\n\n  return out;\n}\n\n/**\n * Get block from ast array\n * @param {object[]} ast\n * @returns {object}\n */\nfunction getBlocks(ast) {\n  ast = Array.isArray(ast) ? ast : [ast];\n\n  return ast.map((node) => {\n    if (t.isReturnStatement(node)) {\n      return getBlocks(node.argument);\n    }\n    if (t.isConditionalExpression(node)) {\n      return node.alternate ? [\n        ...getBlocks(node.consequent),\n        ...getBlocks(node.alternate),\n      ] : getBlocks(node.consequent);\n    }\n    if (t.isBinaryExpression(node)) {\n      return handleBinaryExpression(node);\n    }\n\n    return null;\n  }).filter(Boolean).reduce((prev, arr) => prev.concat(arr), []);\n}\n\nfunction everyBlock({ keysUsed, props }, { name, cleanName, block, replaceWith }) {\n  if (keysUsed.includes(name)) {\n    return { keysUsed, props };\n  }\n  keysUsed.push(name);\n\n  props.push(t.objectProperty(\n    t.stringLiteral(name),\n    t.functionExpression(\n      t.identifier(cleanName),\n      c.runtimeParams,\n      t.blockStatement([t.returnStatement(block)])\n    )\n  ));\n\n  replaceWith(t.callExpression(t.memberExpression(\n    c.BLOCKS,\n    t.stringLiteral(name),\n    true\n  ), c.runtimeParams));\n\n  return { keysUsed, props };\n}\n\n/**\n * Pull top-level blocks out of ast and expose them at `compiled.blocks`\n * @param {object} ast\n * @returns {object}\n */\nfunction blocks(ast) {\n  const body = [ast];\n  // start with body of function\n  const nodes = getBlocks(ast.body.body);\n  if (nodes.length) {\n    const { props } = nodes.reduce(everyBlock, { keysUsed: [], props: [] });\n    body.push(t.expressionStatement(t.assignmentExpression(\n      '=',\n      c.BLOCKS,\n      t.objectExpression(props)\n    )));\n  }\n\n  return body;\n}\n\nmodule.exports = blocks;\n"],"file":"blocks.js"}