{"version":3,"sources":["../../lib/compile-render.js"],"names":["md5","require","Cache","Benchpress","precompile","runtime","evaluate","compileRenderCache","stdTTL","useClones","compileRender","templateSource","data","block","hash","Promise","try","cached","get","ttl","templateFunction","then","code","set","blocks","helpers","catch","err","message","slice","stack","compileParse","callback","output","process","nextTick","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst md5 = require('md5');\nconst Cache = require('node-cache');\n\nconst Benchpress = require('./benchpress');\nconst precompile = require('./precompile');\nconst runtime = require('./runtime');\nconst evaluate = require('./evaluate');\n\nconst compileRenderCache = new Cache({\n  stdTTL: 60 * 60, // one hour\n  useClones: false,\n});\n\n/**\n * Compile a template and render it\n * Automatically caches template function based on hash of input template\n * @param {string} templateSource\n * @param {any} data\n * @param {string} [block]\n * @returns {Promise<string>} - rendered output\n */\nfunction compileRender(templateSource, data, block) {\n  const hash = md5(templateSource);\n\n  return Promise.try(() => {\n    const cached = compileRenderCache.get(hash);\n    if (cached) {\n      compileRenderCache.ttl(hash);\n      return cached;\n    }\n\n    const templateFunction = precompile(templateSource, {})\n      .then(code => evaluate(code));\n\n    compileRenderCache.set(hash, templateFunction);\n    return templateFunction;\n  }).then((templateFunction) => {\n    if (block) {\n      templateFunction = templateFunction.blocks && templateFunction.blocks[block];\n    }\n    if (!templateFunction) {\n      return '';\n    }\n\n    return runtime(Benchpress.helpers, data, templateFunction);\n  }).catch((err) => {\n    err.message = `Render failed for template ${templateSource.slice(0, 20)}:\\n ${err.message}`;\n    err.stack = `Render failed for template ${templateSource.slice(0, 20)}:\\n ${err.stack}`;\n\n    throw err;\n  });\n}\n\n/**\n * Alias for {@link compileRender}, but uses a callback\n * @param {string} templateSource\n * @param {string} [block]\n * @param {any} data\n * @param {function} callback - (err, output)\n *\n * @deprecated - Use {@link compileRender} instead\n */\nfunction compileParse(templateSource, block, data, callback) {\n  if (!callback && typeof block === 'object' && typeof data === 'function') {\n    callback = data;\n    data = block;\n    block = null;\n  }\n  if (!templateSource) {\n    callback('');\n    return;\n  }\n\n  compileRender(templateSource, data, block)\n    .then(\n      output => process.nextTick(callback, null, output),\n      err => process.nextTick(callback, err),\n    );\n}\n\nexports.compileRender = compileRender;\nexports.compileParse = compileParse;\n"],"file":"compile-render.js"}