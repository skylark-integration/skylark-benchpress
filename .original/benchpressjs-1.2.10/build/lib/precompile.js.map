{"version":3,"sources":["../../lib/precompile.js"],"names":["uglifyjs","require","prefixer","tokenizer","parser","compiler","blocks","codegen","wrap","compiled","replace","compileFallback","source","opts","prefixed","tokens","parsed","fnAst","ast","code","minified","minify","wrapped","result","error","compile","e","console","warn","process","platform","precompile","options","callback","promise","Promise","try","Object","assign","defaults","Error","unsafe","native","then","nextTick","err","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst uglifyjs = require('uglify-js');\n\nconst prefixer = require('./compiler/prefixer');\nconst tokenizer = require('./compiler/tokenizer');\nconst parser = require('./compiler/parser');\nconst compiler = require('./compiler/compiler');\nconst blocks = require('./compiler/blocks');\nconst codegen = require('./compiler/codegen');\n\nfunction wrap(compiled) {\n  return `\n(function (factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  }\n})(function () {\n  ${compiled.replace(/\\n/g, '\\n\\t')}\n\n  return compiled;\n});\n  `;\n}\n\nfunction compileFallback(source, opts) {\n  const prefixed = prefixer(source);\n  const tokens = tokenizer(prefixed);\n  const parsed = parser(tokens);\n  const fnAst = compiler(parsed, opts);\n  const ast = blocks(fnAst);\n  const code = codegen(ast, { minified: opts.minify });\n\n  return wrap(code);\n}\n\nfunction minify(wrapped) {\n  const result = uglifyjs.minify(wrapped);\n\n  if (result.error) {\n    throw result.error;\n  }\n\n  return result.code;\n}\n\nconst compile = (() => {\n  try {\n    // eslint-disable-next-line global-require, import/no-unresolved\n    return require('../../rust/benchpress-rs').compile;\n  } catch (e) {\n    /* eslint-disable no-console */\n    console.warn('[benchpressjs] Unable to build or find a suitable native module, falling back to JS version');\n    if (process.platform === 'win32') {\n      console.warn('[benchpressjs] On Windows, make sure the VS2015 Redistributable binaries are installed');\n    }\n    /* eslint-enable no-console */\n    return compileFallback;\n  }\n})();\n\n/**\n * Precompile a benchpress template\n * - `precompiled(source, options): Promise<string>`\n * - `precompile(source, options, callback) => callback(err, output)`\n * - `precompile({ source, ...options }, callback) => callback(err, output)`\n *\n * @param {string} source - Template source\n * @param {Object} options\n * @param {boolean} [options.minify = false] - Output minified code\n * @param {boolean} [options.unsafe = false] - Disable safety checks, will throw on misshapen data\n * @param {boolean} [options.native = true] - Use the native Rust compiler if available\n * @param {function} [callback] - (err, output)\n * @returns {Promise<string>} - output code\n */\nfunction precompile(source, options, callback) {\n  if (typeof source === 'object' && typeof options === 'function') {\n    callback = options;\n    options = source;\n    source = options.source;\n  }\n\n  const promise = Promise.try(() => {\n    const opts = Object.assign({}, precompile.defaults, options);\n\n    if (typeof source !== 'string') {\n      throw Error('source must be a string');\n    }\n\n    // benchpress-rs doesn't support unsafe yet\n    const compiled = (opts.unsafe || opts.native === false ? compileFallback : compile)(\n      source,\n      opts\n    );\n    return opts.minify ? minify(compiled) : compiled;\n  });\n\n  if (callback) {\n    promise.then(\n      code => process.nextTick(callback, null, code),\n      err => process.nextTick(callback, err),\n    );\n  }\n\n  return promise;\n}\n\nprecompile.defaults = {\n  minify: false,\n  unsafe: false,\n  native: true,\n};\n\nmodule.exports = precompile;\n"],"file":"precompile.js"}